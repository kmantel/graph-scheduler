[metadata]
name = graph-scheduler
author = Katherine Mantel, Princeton University
author_email = kmantel@princeton.edu
description = A graph-based scheduler of nodes based on structure and conditions
long_description = file: README.md
long_description_content_type = text/markdown
license_file = LICENSE.txt
url = https://github.com/kmantel/graph-scheduler
project_urls =
    Bug Tracker = https://github.com/kmantel/graph-scheduler/issues
classifiers =
	Development Status :: 5 - Production/Stable
    License :: OSI Approved :: Apache Software License
    Operating System :: OS Independent
	Programming Language :: Python :: 3.7
	Programming Language :: Python :: 3.8
	Programming Language :: Python :: 3.9

[options]
package_dir =
    = src
packages = find:
python_requires = >=3.7

[options.packages.find]
where = src

[bdist_wheel]
python-tag = py3

[tool:pytest]
addopts =
    -s
    -vv
    -n auto
    --cov
    --cov-config setup.cfg
    --pydocstyle
    --pycodestyle
    --strict-markers
    --strict-config

markers =
	llvm: Tests using LLVM runtime compiler
	cuda: Tests using LLVM runtime compiler and CUDA GPGPU backend
    psyneulink: Tests requiring PsyNeuLink

# These are needed for test fixtures or default parameters
required_plugins = pytest-cov pytest-helpers-namespace pytest-pycodestyle pytest-pydocstyle pytest-xdist

xfail_strict = True

filterwarnings =
	error:Creating an ndarray from ragged nested sequences \(which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes\) is deprecated.*:numpy.VisibleDeprecationWarning
	ignore:Multiple ParameterPorts:UserWarning

[pycodestyle]
# for code explanation see https://pep8.readthedocs.io/en/latest/intro.html#error-codes
ignore = E117,E124,E126,E127,E128,E231,E241,E261,E265,E302,E303,E501,W503
exclude = .git/*,__pytest__/*,docs/*

[pydocstyle]
# for code explanation see http://www.pydocstyle.org/en/latest/error_codes.html
add-ignore = D100,D101,D102,D103,D105,D107,D200,D204,D205,D208,D301,D400,D401,D403,D412
match-dir = (?!docs).*

[coverage:run]
branch = True
concurrency = multiprocessing
source = src/graph_scheduler/
omit = src/graph_scheduler/_version.py

[coverage:report]
fail_under = 75

# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    if .* in .*debug_env:

    # Don't complain if tests don't hit defensive assertion code:
    raise .*Error
    assert False.*

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[versioneer]
VCS = git
style = pep440
versionfile_source = src/graph_scheduler/_version.py
versionfile_build = graph_scheduler/_version.py
tag_prefix = v
parentdir_prefix = graph_scheduler-
