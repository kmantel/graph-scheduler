name: PsyNeuLink CI

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'doc_requirements.txt'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'doc_requirements.txt'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        python-architecture: ['x64']
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          # add 32-bit build on windows
          - python-version: 3.6
            python-architecture: 'x86'
            os: windows-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
      with:
        fetch-depth: 10

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.1
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.python-architecture }}

    - name: Get pip cache location
      shell: bash
      id: pip_cache
      run: |
        python -m pip install -U pip
        python -m pip --version
        echo ::set-output name=pip_cache_dir::$(python -m pip cache dir)

    - name: Wheels cache
      uses: actions/cache@v2.1.3
      with:
        path: ${{ steps.pip_cache.outputs.pip_cache_dir }}/wheels
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ matrix.python-architecture }}-pip-wheels-v2-${{ github.sha }}
        restore-keys: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ matrix.python-architecture }}-pip-wheels-v2

    - name: MacOS dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1 brew install graphviz
      if: startsWith(runner.os, 'macOS')

    - name: Linux dependencies
      run: sudo apt-get install -y graphviz
      if: startsWith(runner.os, 'Linux')

    - name: Windows dependencies
      run: choco install --no-progress -y graphviz --version=2.38.0.20190211
      if: startsWith(runner.os, 'Windows')

    - name: Shared dependencies
      shell: bash
      run: |
        # explicitly install numpy (https://github.com/pypa/pip/issues/9239)
        python -m pip install --upgrade pip wheel $(grep numpy requirements.txt)
        pip install -e .[dev]

    - name: Windows pytorch
      shell: bash
      run: |
        pip install $(grep -o 'torch[0-9<=\.]*' requirements.txt) -f https://download.pytorch.org/whl/cpu/torch_stable.html
      if: startsWith(runner.os, 'Windows') && matrix.python-architecture != 'x86'

    - name: Cleanup old wheels
      shell: bash
      run: |
        pip cache info
        INSTALLED=`pip list | sed 's/-/_/g' | sed 's/  */-/' | tail -n+3`
        CACHED=`pip cache list | cut -f 2,3 -d- | tail -n+3`
        for P in $CACHED; do
          # Remove cached and not installed
          if [ `echo $INSTALLED | grep -o $P | wc -l` == "0" ] ; then
            pip cache remove -v $P
          fi
        done

    - name: Lint with flake8
      shell: bash
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: pytest --junit-xml=tests_out.xml --verbosity=0 -n auto --maxprocesses=2

    - name: Upload test results
      uses: actions/upload-artifact@v2.2.2
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.python-architecture }}
        path: tests_out.xml
      if: success() || failure()

    # Actions below build bdist wheel. Run only for tags.
    - name: Build dist
      run: |
        pip install setuptools wheel
        python setup.py sdist bdist_wheel
      if: contains(github.ref, 'tags')

    - name: Upload dist packages
      uses: actions/upload-artifact@v2.2.2
      with:
        name: dist-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.python-architecture }}
        path: dist/
      if: contains(github.ref, 'tags')
